1.
SELECT d.department_name, ROUND(AVG(e.salary),2) AS 'average_salary' 
FROM departments AS d
JOIN employees AS e ON d.department_id = e.department_id 
GROUP BY d.department_name
HAVING d.department_name = 'Sales'; 

----------------------------------------------------------
2.
SELECT d.department_name, COUNT(*) AS workers 
FROM departments AS d 
JOIN employees AS e ON d.department_id = e.department_id
WHERE d.department_name = 'Sales';

----------------------------------------------------------
3.
SELECT COUNT(DISTINCT l.location_id) AS total_locations
FROM locations AS l
JOIN departments AS d ON d.location_id = l.location_id;

----------------------------------------------------------
4.
SELECT COUNT(manager_id) AS departments_with_manager 
FROM departments;

----------------------------------------------------------
5.
SELECT COUNT(*) AS departments_without_manager 
FROM departments WHERE manager_id IS NULL;

----------------------------------------------------------
6.
SELECT d.department_name, ROUND (AVG(e.salary),2) AS average_salary 
FROM departments AS d
JOIN employees AS e 
ON d.department_id = e.department_id
GROUP BY d.department_name;

-----------------------------------------------------------
7.
SELECT d.department_name, l.city, COUNT(*) AS total_employees
FROM departments AS d
JOIN locations AS l 
ON l.location_id = d.location_id
JOIN employees AS e
ON e.department_id = d.department_id
GROUP BY department_name;

-------------------------------------------------------------
8.
SELECT d.department_name, CONCAT(e.first_name," ", e.last_name) AS manager,
COUNT(e.employee_id) AS employees_in_department
FROM departments AS d 
JOIN employees AS e ON d.department_id = e.department_id
JOIN employees AS e2 ON e.employee_id = e2.manager_id
GROUP BY d.department_name;

-------------------------------------------------------------
9.
SELECT d.department_name, CONCAT(e.first_name," ", e.last_name) AS manager,
COUNT(e.employee_id) AS employees_in_department,
l.city
FROM departments AS d 
JOIN employees AS e ON d.department_id = e.department_id
JOIN employees AS e2 ON e.employee_id = e2.manager_id
JOIN locations AS l ON l.location_id = d.location_id
GROUP BY d.department_name
HAVING employees_in_department = 5;

--------------------------------------------------------------
10.
SELECT r.region_name, COUNT(*) FROM regions AS r
JOIN countries AS c ON r.region_id = c.region_id
JOIN locations AS l ON l.country_id = c.country_id
JOIN departments AS d ON d.location_id = l.location_id
JOIN employees AS e ON e.department_id = d.department_id
GROUP BY region_name;

---------------------------------------------------------------
11.
SELECT d.department_name, j.job_title, COUNT(*) AS total_employees
FROM departments AS d 
JOIN employees AS e
ON e.department_id = d.department_id
JOIN jobs AS j ON j.job_id = e.job_id
GROUP BY d.department_name, j.job_title;

---------------------------------------------------------------
12.
SELECT CONCAT(e.first_name," ", e.last_name) AS full_name, e.salary 
FROM employees AS e
JOIN jobs AS j ON j.job_id = e.job_id
WHERE e.salary = (SELECT MIN(j.min_salary) FROM jobs);

---------------------------------------------------------------
13.
SELECT CONCAT(e.first_name," ",e.last_name) AS full_name,
e.salary, j.job_title, j.min_salary 
FROM employees AS e 
JOIN jobs AS j ON j.job_id = e.job_id
WHERE e.salary <= j.min_salary *1.1;

-----------------------------------------------------------------
14.
SELECT d.department_name, CONCAT(e.first_name," ", e.last_name) AS full_name,
e.salary
FROM departments AS d 
JOIN employees AS e ON d.department_id = e.department_id
GROUP BY d.department_name
HAVING MAX(e.salary);

-----------------------------------------------------------------
15.
SELECT last_name FROM employees 
WHERE LENGTH(last_name) = 5;

-----------------------------------------------------------------
16.
SELECT CONCAT(first_name, " ", last_name) AS full_name
FROM employees 
WHERE SUBSTRING(first_name,1,1) = SUBSTRING(last_name,1,1);

-----------------------------------------------------------------
17.
SELECT d.department_name, COALESCE(CONCAT(e.first_name," ",e.last_name),"NO MANAGER") AS manager
FROM departments AS d 
LEFT JOIN employees AS e ON d.department_id = e.department_id
GROUP BY d.department_name;

----------------------------------------------------------------
18.
баси бъгавата заявка ..........
SELECT CONCAT(e.first_name," ",e.last_name) AS manager, COUNT(*),
CASE 
WHEN COUNT(*) = 0 THEN "Just employee"
WHEN COUNT(*) = 1 THEN "Junior manager"
ELSE COUNT(*)
END
AS managed_people
FROM employees AS e 
JOIN employees AS e2 ON e.employee_id = e2.manager_id
GROUP BY e2.manager_id;

----------------------------------------------------------------
19.
SELECT CURRENT_TIMESTAMP() AS current_date_time, 
DATE_ADD(CURRENT_TIMESTAMP(),INTERVAL 7 DAY) AS after_week;

----------------------------------------------------------------
20.
CREATE TABLE users(
id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
username VARCHAR(50) NOT NULL UNIQUE,
password VARCHAR(30) NOT NULL,
full_name VARCHAR(100) NOT NULL,
last_login DATETIME
);

????????????????????????? 
какво ако става да се изпълни тригера?

DELIMITER $$

CREATE TRIGGER complete_full_name BEFORE INSERT ON users
FOR EACH ROW 
BEGIN 
SET NEW.full_name = 'FULL NAME';
END$$

DELIMITER ;

INSERT INTO users
(username,password,full_name,last_login)
VALUES 
("peshkata", 123,"Petar Ivanov",NOW());

------------------------------------------------------------------
21.
CREATE VIEW today_logged_users AS 
SELECT * FROM users
WHERE DATE(last_login) = CURDATE();

------------------------------------------------------------------
22.
CREATE TABLE groupss
(name VARCHAR(50) UNIQUE NOT NULL);

 - group не става запазена дума е и с кавички не става и със скоби и stackoverflow не помага

------------------------------------------------------------------
23.
- не може вече създадена таблица и поле, което е Non null и има вече записи да е foreign key

ALTER TABLE groupss 
ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY FIRST;

INSERT INTO groupss 
(name)
VALUES
("Purva"),
("Vtora"),
("Treta");

ALTER TABLE users
ADD COLUMN group_id INT;

ALTER TABLE users 
ADD CONSTRAINT fk_users_groupss
FOREIGN KEY (group_id)
REFERENCES groupss(id);

------------------------------------------------------------------
24.
INSERT INTO groupss
(name)
VALUES 
("Chetvurta"),
("Peta"),
("Shesta");

INSERT INTO users 
(username,password,full_name,last_login)
VALUES
("spens","slabaparola","Spens Spensov", DATE('2020-01-01')),
("bojigol","kamburakis","Bojinov Valeri", DATE('2022-01-10')),
("berbo","liverpool","Dimitar Berbatov", CURDATE());

-------------------------------------------------------------------
25.
INSERT INTO users (full_name,username,password)
SELECT CONCAT(first_name," ", last_name),email," " FROM employees; 
